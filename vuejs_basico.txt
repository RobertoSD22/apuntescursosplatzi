=================== APUNTES DEL CURSO DE Javascript BASICO =======================

===== HERRAMIENTAS =====

    Codepen
    NodeJS          12.16.3
    NPM             6.14.4
    Vetur           Plugin oficial de VueJS (dice que la extensión esta habilitada globalmente)
    Vs Code ESLint  Plugin es el inter de nuestro codigo cuando se genere la aplicación con el CLI
                    permite detectar errores y posibles antipatrones, prblemas de template al momento de configurar nuestro codigo javascript
    Prettier        Plugin complementa con Eslint para formatear el codigo y no tener que acomodar los tabs
    Vue JS devtools Chrome Plugin - Vue.js devtools https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd
    CLI VUE         https://cli.vuejs.org/
    Tailwind CSS    Framework para usar clases en css (simplfica los estilos en clases más cortas)
    FETCH           https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API

    - Para que funcione Prettier: funciona el Prettier, es cuestión de que se metan a los setting de Visual Studio y busquen Format On Save, y activen la opción

===== CONCEPTOS DE LAS CLASES =====

VUEJS

    - Versatil: Se puede usar para cosas muy sencillas o muy  complejas
    - Performante: Es muy pequeño de peso, esta pensado y optimizado para hacer mutaciones en el dom
    - Es un Framework progresivo por su versatilidad
    - Es una libreria que se encarga de resolver el problema de la vista
    - Vue es una libreria enfocada en la vista que utiliza el virtual dom y es totalmente reactiva
    - CARACTERISTICAS PRINCIPALES:
        - El sistema de componente - Nos permite modularizar
        - El sistema declarativo - Nos permite usar el dom

PROBLEMA QUE RESUELVE VUEJS

    - Linkear (relacionar) nuestra parte de Javascript con HTML
    - Poder hacer que un elemento HTML tome su texto o valor en base a un valor que tenemos en nuestro HTml

REACTIVIDAD

    - Que la pantalla se actualice cuando cambian los valores (vueJS nos ayuda con eso)

PROPIEDADES/OBJETOS VUEJS

    - el: pseudo selector de css, nos permite determinar cual es el elemento del DOM al cual se va a atachar nuestra aplicacion
          todo lo que este afuera de este elemento, esta fuera de la aplicación de VueJS y no tiene control sobre esos elementos
    - data: es una función que devuelve un objeto, dentro de este objeto podemos definir todas las propiedades que podemos utilizar dentro de nuestro template
    - method: es un objeto de la instancia de vue donde se pueden definir funciones
    - computed: es un objeto que contiene funciones que devuelven un valor a partir de otras variables
                y que VueJS se encarga de actualizar cuando una de esas variables cambia de valor
    - watch: es un objeto que contiene funciones que ejecutan un codigo a partir de un cambio en las variables
             el nombre de la funcion tiene que ser el nombre de una variable en data
    

    - computed y watch: Son propiedades que se calculan en tiempo real en base a los valores de otras propiedades

EXPRESIONES

    - Son la manera que nos da Vue de crear templates de manera dinamica dentro de nuestro html
    - Se hacen con {{}}
    - Tambien se puede ejecutar cualquier tipo de codigo javascript valido (no for, while, do while, if else)

RENDERING DECLARATIVO (IMAGEN1)

    - El Declarative Rendering es la opción que nos propone VueJS para interactuar con el DOM
    - Two Way Data Binding: bindeo de los dos lados (vista(HTML) y estado(Javascript))
        1.- La vista se encarga de decirle al estado que hay cambios, a lo cual el estado va a reaccionar y mandar una nueva vista.
        2.- El estado se encarga de decirle a la vista como y cuando tiene que compilar y cual es el resultado que se tiene que lograr, 
            esto lo hace con una función que se llama render.

    - PERMITE TENER SINCRONIZADO el browser con lo que tengo en el estado!!!
    - Si el usuario hace algun cambio dentro de la vista voy a actualizar mi estado
    - Si mi estado cambia por alguna cosa de javascript como una funcion de javascript entonces cambia mi vista
    - Se genera un circulo virtuoso en donde tenemos un linkeo en tiempo real de lo que esta en el HTML con lo que esta en Javascript

ATRIBUTOS DINAMICOS / DIRECTIVAS (app.js , index.html , styles.css)

    - Herramientas que nos da vue para que los atributos HTML tengan valores dinamicos
    - v-bind y el atributo de html permiten que se les agregue una variable de VueJS!!!!!, ejemplo
        <img v-bind:src="img" v-bind:alt="name"/> (img y name son variables declaradas en data de vue)
    - v-bid puede ser remplazado por :src o :alt (ES LA UNICA DIRECTIVA QUE PUEDE SUSTITUIR)

    Directivas para control de flujo:

        - v-if , v-show, v-else
        - v-if = Si las variables no cumplen, ni siquiera aparecen en el DOM
        - v-show = Si las variables no cumplen, tiene un display: none
    
    Directivas de renderizado de listas

        - v-for nos permite iterar sobre elementos de un array
        - key va junto con v-for, le permite a vue identificar de manera uniboca a cada uno de los elementos
          va junto con v-bind, por ejemplo v-bind:key="index"
        - Puede utilizarse tambien el indice, por ejemplo:
          v-for="(objeto, indice) in arreglo"
    
    v-model

        - Nos permite linkear lo que esta pasando en nuestro form a traves de los inputs o
          combos, se va actualizando la información del usuario

THIS

    -  A traves de esta Keyword pueden acceder a las propiedades o métodos que hay dentro de la instancia de Vue

CLASS (atributo de los estilos) con VUEJS

    - Se puede utilizar v-bind:class="variable_vue = 'clase'"
    - o se puede utilizar con objetos v-bind:class="{'clase' : vue_variable}"

    - Tambien se puede usa v-bind:class="" y class="" al mismo tiempo en un componente de html

SISTEMA DE COMPONENTES

    - El sistema de componentes es la segunda funcionalidad importante que tiene VueJS.
    - Esta basado en la especificación de Web Components API
    - Cada componente es reutilizable a lo largo del proyecto, tiene su lógica, su estructura y su diseño
    - TIENE SEMANTICA EN EL CODIGO GRACIAS A ESTO (Concepto del curso de front developer)

    - CREACION - Cuando creamos un componente Vue nos exije tener un unico componente padre
                 Se usa Vue.component('nombe', {codigo igual en que la instancia de VueJs})

                - Cuando declaras el nombre en notación de camello 'RobertoShirasago' al declararlo en HTML lo cambia a <roberto-shirasago>

            - La comunicación de PADRES -> HIJOS debe ser con propiedades

                - PROPS: Se utiliza para recibir los objetos del componente padre
                  props: ['variableDelPadre']
    
                - SLOT: Se utiliza para mandar codigo HTML al hijo (ejemplos/slot_basico.html, ejemplos/slot_basico.js)
                  <slot name="nombreDelSlot"></slot>
                - TEMPLATE: Es el tag que se utiliza para enviar el codigo HTML al hijo
                  <template v-slot="nombreDelSlot"></template>
    
            - La comunicación de HIJOS -> PADRES debe ser con eventos

                - Se utiliza this$emit( 'unNombreParaElEvento', parametrosParaElPadre ) en JS
                - Se utiliza v-on:un-nombre-para-el-evento="nombreDelEventoPadre" en HTML
                             v-on: se puede sustituir por @, quedando como @click @blur

    - LIFE CYCLE HOOKS (IMAGEN2)

        - Ciclo de vida de los componentes - a medida que se crean los componentes se pueden lanzar eventos
        - Por ejemplo cuando se crea el componente, cuando se destruye, cuando se actualiza
        - CREATED: Es bueno usarlo cuando se tiene que usar información desde un servidor
        - MOUNTED: Ya tienes disponible información del DOM (Es el evento que se ejecuta cuando se agrega al DOM)

NPM

    - Nos permite generar y descargar las dependencias de vuejs

CLI VUE

    - Una herramienta de desarrollo que nos permite generar la estructura basica de una aplicación de VueJS
    - Reduce el esfuerzo de configuración y de que podamos tener el proyecto listo para trabajar
    - Nos permite generar una versión de desarrollo y una de productivo

    - npm install -g @vue/cli           Con este comando se instala (posterior a node.js)
    - vue create "nombre_proyecto"      Con este creas un proyecto ya configurado (debes ubicarte en la carpeta donde lo quieras)
                                        Si se vuelve a correr se puede ver la configuración guardada por defecto, en este caso platzi
    - npm run lint :                    Busca errores de linteo en nuestra aplicación (Hay que estar dentro del proyecto)
    - npm run build:                    Genera nuestro codigo productivo, entendible para el navegador (Hay que estar dentro del proyecto)
    - npm i -g serve:                   Genera un servidor web en nuestra computadora (Hay que estar dentro del proyecto)
                                        Revisa que la carpeta dist tenga el codigo correcto funcionando (Hay que estar dentro del proyecto)
    - serve -s dist                     Levanta ese servidor web (Hay que estar dentro del proyecto)
    - vue ui                            User interface, genera una aplicación web local para gestionar los proyectos (Hay que estar dentro del proyecto)

    - vue add @ianaya89/tailwind        Es un plugin que genero el profesor con Tailwind (Hay que estar dentro del proyecto)
    - npm i -S                          Guarda la libreria en nuestro package.json
    - npm i -S vue-router               Para importar la libreria de vue-router
    - npm i -S numeral                  Para la libreria que usa los filtros
    - npm i -S @saeris/vue-spinner      Para la pantalla del louder
    - npm i -S vue-chartkick            Para la tabla que esta dentro del detalle
    - npm i -S chart.js                 Para cargar el tipo de grafica


SINGLE FILE COMPONETS

    - Componentes escritos en archivos
    - Son archivos .vue que nos ofrece el framework para trabajar con la logica(javascript), con el css y con html
    - Los archivos .vue no son entendibles por el browser, el cli genera un archivo un codigo entendible por el browser
    - No se pueden crear archivos .vue con el nombre de componentes de HTML ya generados

SINGLE PAGE APLICATION

    - El ejercicio se esta generando en base a una sola página, lo que va a ir cambiando es una porcion del contenido (como en el proyecto de SCT)
    - VUE ROUTER Es una herramienta oficial para hacer este tipo de cambios
    - <router-view\>    Es la etiquieta que nos proporciona el router para decirle en donde se incrustara el codigo que cambie
    - <router-link\>    Nos redirecciona una ruta ya generada
    - path: "*"         Nos redirecciona cuando ponen una ruta que no existe
    - path: "/coin/:id" Podemos generar una ruta dinamica

PUGLINS

    - Vue.use(plugin) : Además de importarlo anteriormente, nos permite utilizar el plugin
    - Agrega funcionalidades, como Vue es progresivo nos permite escalar nuestra aplicación

FETCH

    - Es una funcionalidad nueva que disponen los browsers para hacer interaciones http, con servidores o API´s

FILTROS

    - Son una utilidad que nos da Vue JS que nos permite modificar el valor de la vista sin modificar el valor de la propiedad
    - Tiene su mismo valor, pero tiene una adaptación en pantalla
    - Vamos a usar la libreria "numeral"

PROBLEMAS DE REACTIVIDAD

    - Cuando a un objeto AGREGAS o ELIMINAS un atributo
    - El problema solo se da en objetos o en arrays
    - Cosas que no se establecieron en data
    - this.$set(objecto, nombre_propiedad, valor) soluciona problemas de reactividad con Vue

===== TIPS & RECORDAR =====

    - CoinCap           https://coincap.io/

    - Windows + .      Podemos sacar un emojin
    - node --version   Para revisar si se instalo correctamente node.js (se hace en un cmd)

    - Tal vez se pueda usar v-bid y un atributo normal del componente de html al mismo tiempo como con class (REVISAR)
    - Los colores HEXADECIMALES tienen su contraparte volteando la cadena!! por ejemplo f4f4f4 es blanco y 4f4f4f es negro
    - <style scope> : El scope indica que solo se va a aplicar a ese archivo .vue

    FUNCIONES Javascript

        - .JSONstringify()   Cambia un objeto de javascript a una cadena JSON
        - .split('')         Sobre una cadena, hace que se convierta en un array
        - .reverse()         Sobre un arreglo, hace que los elementos cambien de posicion
        - .join()            Sobre un arreglo, concatena todos los elementos de un arreglo y genera una secuencia
                             this.colorBitcoin = this.colorBitcoin.split('').reverse().join(''); F4F4F4 -> 4F4F4F
        - .includes()        Sobre una cadena, busca si hay un caracter que le pases como parametro, por ejemplo:
                             'roberto'.includes('t') esto nos daria TRUE
        - .sort((a,b))       Funcion para ordenar un arreglo, le llega el elemento actual y el que le sigue en el arreglo         

===== RESUMEN CLASES =====

1   -   Introducción al curso
2   -   QUE es VUE, caracteristicas, descripciones
3   -   PROBLEMA que resuelve VUE, REACTIVIDAD, PROPIEDADES PRINCIPALES DE VUEJS (el, data), EXPRESIONES (Esta en el Codepen)
4   -   DECLARATIVE RENDERING, TWO WAY DATA BINDING
5   -   EXPRESIONES y PROPIEDADES, ejemplo de que se puede hacer dentro de {{}} (Esta en el Codepen)
6   -   DIRECTIVAS(Atributos dinamigos - v-bind (app.js , index.html , styles.css)
7   -   DIRECTIVAS Control de flujo - v-if, v-show, v-else, v-else-if
8   -   DIRECTIVAS Iteración de elementos - v-for, key, index (vue v-for.html y vue v-for.js)
9   -   DIRECTIVAS Manejo de eventos - v-on, THIS, METHOD para la instancia de Vue
10  -   DIRECTIVAS Classes (estilos) - v-bind con objetos para las clases, normal con validaciones, v-bind:class y class al mismo tiempo
11  -   DIRECTIVAS styles - v-bind:style , split join reverse , TIP cadena HEXADECIMAL 
12  -   COMPUTED y WATCH
13  -   DIRECTIVAS v-model
14  -   EJERCICIO (practica_clase14)
15  -   SISTEMA DE COMPONENTES, la segunda función importante de vue
16  -   EJERCICIO Vue.component https://codepen.io/robertosd22/pen/QWjZOXO
17  -   EJERCICIO props
18  -   EJERCICIO this.$emit
19  -   EJERCICIO SLOT (ejemplos/slot_basico.html, ejemplos/slot_basico.js), TEMPLATE
20  -   EJERCICIO Life Cycle Hooks (ciclo de vida de los componentes) (IMAGEN2), MOUNTED, CREATED
21  -   REPASO (VUE.webp)
22  -   EJERCICIO Repaso en codepen (no lo hice)
23  -   INSTALACIÓN de HERRAMIENTAS (plugins vs code, extension chrome, nodejs)
24  -   CLI (Pasos para generar un proyecto vuejs), tienes que tener instalado el node.js
25  -   SINGLE FILE COMPONENTES (archivos.vue), explicación de como quedo configurado nuestro proyecto
26  -   COMANDOS en nuestra aplicación vue, npm run serve, npm run build, npm run lint, etc
27  -   TAILWIND Instalación, revisión de clases que genera, etc.
28  -   EJERCICIO Agregan los componentes PxHeader, PxIcon y PxAssetsTable (ya estaban por default en su repositorio solo los importamos en App.vue)
29  -   EJERCICIO V-Router, SINGLE PAGE APLICATION, PLUGINS (Vue.use)
30  -   EJERCICIO Consumiendo API, FETCH, v-bind por : (api.js)
31  -   EJERCICIO Filtros, NUMERAL (filter.js)
32  -   EJERCICIO Rutas dinamicas (esta bien perro)  path: "/coin/:id"
33  -   EJERCICIO Rutas dinamicas 2 - v-on: por @, this.$router
34  -   EJERCICIO Se implementan vue-chartkick y vue-spinners
35  -   EJERCICIO PROBLEMAS DE REACTIVIDAD, this.$set en los botones, el loading para esos botones de detalle 
        (solo muestra la ventanida de carga en ese, son los que se cambian por el link)
36  -   EJERCICIO Se agrega funcionalidad para filtrar los registros encontrados y para ordenar en ascendente y descendente
