=================== APUNTES DEL CURSO DE Frontend Developer =======================

===== HERRAMIENTAS =====

    HTML5

===== CONCEPTOS DE LAS CLASES =====

HTTP                - Hyper Text Transfer Protocol - El protocolo de transferencia de hipertexto, la base que permite la comunicacion de datos entre los dispositivos (computadores y servidores)
URL                 - Uniform Resource Locator - Localizador de recursos uniforme, la dirección del sitio web, es la manera en que agregamos un nombre a un punto de la red (como platzi.com)
HTML                - Hyper Text Markup Language - Lenguaje de marcado de hypertexto, un lenguaje para describir la estructura de la pagina web
                      Es un lenguaje de marcado para decirle al navegador como estructurar la página que visitas
CSS                 - Cascade Style Sheets - Hojas de estilo en cascada, son una serie de reglas que describen la apariencia de una página web
                      Es un lenguaje que permite crear páginas web con un diseño agradable para los usuarios

DOM                 - Document Objet Model - Transforma el codigo HTML a objetos que son entendibles para el navegador
CSSOM               - CSS Object Model - Transforma el codigo de CSS a objetos que son entendibles para el navegador
Render Tree         - Es la union del DOM y el CSSOM para renderizar el proceso que hemos hecho en el codigo

Pasos para hacer la transformación de codigo:

    1.- Coger el codigo y transforma en Bytes (IMAGEN1)
    2.- Despues los Bytes los transforma en caracteres (IMAGEN1)
    3.- Transforma los caracteres en tokens (la etiqueta que abre, que cierra, quien va primero y despues), que caracteres pertenecen a que elemento (IMAGEN1)
    4.- Transforma los tokens en Nodes, son objetos que entiende el navegador (IMAGEN1)
    5.- Coge todos los elementos y los transforma en un arbol (IMAGEN1)

Pasos que sigue el navegador para construir las páginas web:

    1.- Procesa el HTML para construir el DOM. (IMAGEN2)
    2.- Procesa el CSS para construir el CSSOM. (IMAGEN2)
    3.- El DOM se une con el CSSOM para crear el Render Tree. (IMAGEN2)
    4.- Se aplican los estilos CSS en el Render Tree. (IMAGEN2)
    5.- Se ““pintan”” los nodos en la pantalla para que los usuarios vean el contenido de la página web. (IMAGEN2)

ANATOMIA DE UN ELEMENTO HTML (IMAGEN4)

    - ETIQUETA DE APERTURA (por ejemplo <h1>), tiene el nombre del elemento y esta envuelto en parentesis angulares
    - CONTENIDO (por ejemplo "Esto es un título")
    - ETIQUETA DE CIERRE (por ejemplo </h1>) tiene el nombre del elemento y esta envuelto en parentesis angulares más un slash

ATRIBUTOS

    - Van sobre los elementos HTML
    - Siempre van sobre la etiqueta de apertura
    - El valor del atributo va entre comillas
    - Los atributos nos permiten definir características especiales para nuestros elementos

ANIDAMIENTO

    - Etiquetas que van dentro de otras

ELEMENTOS VACIOS

    - No llevan contenido pero llevan atributos especiales, como por ejemplo "<img>", "<input>", "<br>", "<hr>"
    - Tampoco tienen etiqueta de cierre

ANATOMIA DE UN DOCUMENTO HTML

    - <!DOCTYPE html>   Nos asegura que el archivo sea analizado como html en los diferentes navegadores
                        Aqui definimos que el documento está bajo estándar HTML5
    - <htm>             Root element, etiqueta principal
    - <head>            No tiene implicación visual en el navegador, incluye la codificación en caracteres (UTF-8 por ejemplo), incluye los metadatos e incluye enlaces (como los de javascript)
    - <body>            Todo lo que se ve en la pantalla/navegador

CODIGO SEMANTICO

    - Darle una estructura a nuestra página (IMAGEN 5), ya que hay etiquetas especiales para cada sección que van dentro del BODY, como <nav>, <article>, etc.
    - Un ejemplo es <i> e <em> visualmente hacen lo mismo, pero <em> hace que se le de enfasis a esa palabra dentro del parrafo, mientras que <i> solo cambia el tipo de texto
    - Tambien es importante para darle mantenimiento al codigo, que otra persona no llegue y no sepa que demonios hiciste

TIPOS DE ERRORES

    - Errores SINTÁCTICOS: Son errores de escritura en el codigo que hacen que el programa no funcione
    - Errores LÓGICOS: La sintaxis es correcta pero el código no hace lo que debería, por lo que el programa funciona de forma incorrecta

ANATOMIA DE UNA DECLARACIÓN CSS

    - SELECTOR: Son la referencia a los elementos HTML, (puede ser el nombre del componente <p>, el id del componente id="identificador", puede ser el nombre de una clase de css o puede ser generico/cuando no tiene nombre el selector y le pega a todos los componentes)
                Van seguidos de corchetes por ejemplo: rob {}
    - PROPIEDAD: Son el tipo de estilo que queremos darle a los elementos.
                 Van seguidos de ":", van dentro de las llaves del selector
                 Se pueden escribir varias propiedades dentro del selector
    - VALOR: Son el estilo que queremos que tomen nuestros elementos HTML con respecto a la propiedad
             Van seguidos de ";"
    - DECLARACIÓN: Es la conjunción de todos los componentes anteriores

TIPOS DE SELECTORES (IMAGEN 6)

    UNIVERSAL: Se pone un asterisco, se aplica a todos nuestros elementos del html
    TIPO: Se pone por componente (no es tan recomendable)
    CLASE: Se crea una clase, es un atributo por componente que se llama "class"
    ID: Se crea por ID, es un atributo ID (no es tan recomendable)

PSEUDO-CLASES (IMAGEN 7)

    - Se utilizan como clases o estilos definidos, por ejemplo para tomar el primer elemento del tipo de elemento que se le de o el ultimo o jugar con las posiciones en base a matemaricas con ellos
    - Llevan : despues del selector
    - Ejemplo: p:first-child, p:last-child, p:nth-child(2n) o p:nth-child(2n+1)

PSEUDO-ELEMENTOS (IMAGEN 8)

    - Se le dice en que parte del elemento se quiere recibir los estilos
    - Llevan :: despues del selector
    - Se utilizan para insertar elementos dentro del contenido del componente por ejemplo:
    - .ribbon::before {
        content: "Este parrafo iria ates de lo que este dentro del estilo"
        background-color: "#FFBA10"
        border-color: black;
        border-style: dotted;
    }

MODELO DE CAJA (IMAGEN 9) (EJERCICIO modelo-de-caja.html)

    - Todos los elementos de HTML lo tienen, se ve con el inspector del navegador
    - Se compone de 4 elementos:

        * El contenido - Lo que esta de color azul, que tiene las dimensiones
        * El padding - Esta entre el contenido y el borde, se encuentra dentro del elemento
        * El border - Borde del elemento
        * El margin - El espacio a fuera del componente (funciona con otros elementos a los lados)

UNIDADES DE MEDIDA ABSOLUTAS (IMAGEN 10) (EJERCICIO header.html)

    - No se fijan en la medida de otro elemento, solo se necesitan a ellas mismas
    - Por ejemplo: cm, mm, in, px, pc, pt
    - No se ven afectados por nadie (width, height)

UNIDADES DE MEDIDA RELATIVAS (IMAGEN 11) (EJERCICIO header.html)

    - Estan relativas a otra unidad de medida o elemento, estan los porcentajes
    - Por ejemplo: vmax, em, ch, ex, rem, cmin, cw, vh
    - Las medidas relativas se ajustan a todos los tipos de pantalla que existen

DISPLAY en CSS

    - Todos los elementos en CSS son cuadros o rectángulos
    - El comportamiento se define a traves de la propiedad display
    - EJEMPLOS:
        - BLOCK: Los elementos se visualizan uno debajo del otro
                 Algunos elementos con este display por defecto son: <p>, <h1>, <section>, <div> <ul>
        - INLINE: Los elementos se visualizan de izquierda a derecha
                  Algunos elementos con este display por defecto son: <span>, <em>, <b>
        - INLINE-BLOCK: Igual que INLINE pero respetando el width y el height de los elementos
        - NONE: Sirve para ocultar elementos sin desaparecerlos del DOM
        - TABLE: Se comportan como elementos table
        - FLEX: Va acompañado para Flexbox junto con mas atributos
        - GRID: Más poderoso que FLEX, un sistema de layout CSS GRID.
                Se usa en el elemento contedenor o padre con display: grid
        
    - La diferencia de uso entre Flexbox y Css Grid, es que CSS Grid es para el layout de 2 dimensiones y Flexbox para una dimensión. 
      Es decir, CSS Grid, sirve para aplicar el layout a toda la página, y Flexbox para aplicar layout a elementos de la página.

===== TIPS & RECORDAR =====

- https://htmlreference.io/ se puede ver todos los componentes de HTML
- https://cssreference.io/ se pueden ver todos los atributos de CSS
- RENDERIZAR es presentar la pantalla en el navegador
- https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements Pseudo elementos
- https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes Pseudo clases
- https://colorhunt.co/ colores que combinan entre si
- https://css-tricks.com/snippets/css/a-guide-to-flexbox/ DISPLAY FLEX
- https://css-tricks.com/snippets/css/complete-guide-grid/ DISPLAY GRID

===== RESUMEN CLASES =====

1   - Introducción, comenzo con diciendo que es un curso de HTML y CSS, no se porque
2   - Video de youtube, conceptos como HTTP, URL, HTML y CSS
3   - Explicación de que es HTML y CSS
4   - Conceptos como DOM, CSSOM, Render Tree, pasos para que un navegador construye una pagina web
5   - Tips para aprender CSS (IMAGEN 3), si no los pone en una clase posterior los agregare yo
6   - Conceptos de partes de un elemento de HTML, atributos y elementos vacios
7   - Conceptos del DOCTYPE, HTML, HEAD y BODY
8   - No hay video, es una página donde ponen todas las etiquetas más usadas en HTML
9   - Concepto de CODIGO SEMANTICO (buenisimo)
10  - Tipos de errores en HTML y se pueden validar en esta página: https://validator.w3.org/
11  - Ejercicio con las etiquetas (no las había explicado y ya nos puso un ejercicio!)
12  - Anatomia del CSS
13  - Tipo de selectores (universales, tipo, clase y id) PSEUDO CLASES y PSEUDO ELEMENTOS
14  - MODELO DE CAJA
15  - VALORES ABSOLUTOS, RELATIVOS y Ejercicio del header de platzi
16  - DISPLAYS, una lectura con los displays