=================== APUNTES DEL CURSO DE Javascript BASICO =======================

===== HERRAMIENTAS =====

    Nodejs      12.16.3
    npm         6.14.4
    Nodemon     npm install -g nodemon   

===== CONCEPTOS DE LAS CLASES =====

NODEJS

    - Es un entorno de ejecución de Javascript fuera del navegador
    - Se crea en 2009 y es orientado a servidores (v8 en 2008)
    - Puedes ejecutarlo en:
        - servidores
        - herramientas
        - en una laptop por ejemplo
    
CARACTERÍSTICAS

    - Concurrente - Aun que sea MONOHILO, sus entradas y salidas son asíncronas
                    Un proceso por cada núcleo del procesador
    - Corre sobre el Motor V8   - Entorno de ejecución de JS creado por Google y libre desde 2008
                                  Convierte JS en código máquina en lugar de interpretarlo en tiempo real
                                  Esta escrito en c++ y es super rápido
    - Módulos   - Funciona en base a módulos
                - Todo lo que no sea sintaxis de programación, son módulos
                - Muchos módulos vienen por defecto en el paquete de Node
    - Orientado a Eventos   - Hay un bucle de eventos que se ejecuta constantemente
                            - El bucle permite que se programe de forma reactiva
                              (cuando suceda esta cosa dispara mi código, 
                               cuando se cree un archivo ejecuta mi código, 
                               cuando tengamos un error ejecuta mi código, etc.)

EVENT LOOP

    - Es un bucle (como un while) que se esta ejecutando todo el tiempo
    - Hay un proceso que gestiona de forma aumatica para que funcione de forma asincrona
    - El bucle no se bloquea, todo se ejecuta aparte

    (IMAGEN 1)
    1.- El Event Queue es el que envia los eventos que ejecutamos
    2.- El Event Loop se encarga de ejecutarlos
    3.- En caso de que sean complicados o tarde mucho tiempo en ejecutarlos los manda al Thread Pool

    THREAD POOL (IMAGEN 2)

        - Ejecuta un hilo por cada una de las tareas que se le deleguen
        - Puede regresar el hilo al event loop para que otra tarea del callback Queue lo encole en una nueva petición

MONOHILO

    PROCESO DE NODE

        1.- Va a abrirse un proceso, ese proceso es un proceso de node
        2.- Interpreta todo el archivo
        3.- Convertirlo a código maquina
        4.- Prepara todo lo que necesita para ejecutarse
        5.- Se ejecuta
        6.- Se cierra el proceso, y termina

    DESVENTAJAS MONOHILO (conceptos/monohilo.js)

        - Si no se manejan bien los errores y uno truena, ya no continua con los procesos posteriores
        - Debes estar pendiente de todo el código

VARIABLES DE ENTORNO (conceptos/entorno.js)

    - Se declaran como:                                      process.env.NOMBRE_VARIABLE en el archivo JS
    - Para llamarla en BASH (GITBASH por ejemplo) sería:     NOMBRE=Roberto node archivo.js
      Se pueden poner varias al mismo tiempo:                NOMBRE=x APELLIDO=z node archivo.js (Con un espacio se separan)
    - En windows primero se hace:                            SET NOMBRE_VARIABLE=VALOR
      Luego:                                                 node archivio.js               
    - Para ponerle un valor por DEFAULT:                     process.env.NOMBRE_VARIABLE || 'Valor por default' en el archivo JS

    - Las variables de entorno se ponen en mayusculas (viene desde que se usaban en servidores Linux)

NODEMON

    - Es una herramienta que cada que detecte cambios en el código o en las dependencias que estemos usando
      va a volver a ejecutar ese codigo
    - Se installa con:  npm install -g nodemon (LA -g ES DE GLOBAL, una instalación global)
    - Se ejecuta con:   nodemon archivo.js

    - PM2 es parecido, pero es para PRODUCCIÓN, no para desarrollo, tiene muchas cosas

PROMESAS (async/promises.js)

    - Pueden estar:
        Resueltas
        Pendientes
        Fallar
    - new Promise(function(resolve,reject){})
    - Siempre poner el callback para los errores

ASYC AWAIT (async/asyncAwait.js)

    - Con esto podemos realizar tareas asincronas en orden
    - Se le ponen a las funciones el "async" antes de la declaración
    - Se le ponen a las llamadas el "await" antes de mandarlas llamar

MODULOS GLOBALES

    - Son modulos que ya estan cargados en nodejs
    - "global" es el objeto donde estan guardados todos los modulos globales
    - Es mejor no crear variables globales, un ejemplo puede ser con global.miVariable = 'ValorGlobal'

    FILE SYSTEM

        - Modulo global de los más usados
        - Permite acceder a los archivos de nuestro sistema, cambiarlos, escribirlos, leerlos, cambiarles el nombre
        - Todo lo que se haga con filesystem es de forma ASINCRONA 
        (hay métodos sincronos pero no se recomiendan porque no se puede ejecutar los otros procesos)
        - readFile (leer), writteFile (crear/escribir), unlink (borrar)

    CONSOLE (modulos/consola.js)

        - console.table
        - console.group y console.endGroup
        - console.count y console.countReset

    TRY CATCH  (modulos/errores.js)

        - Para envolver las funciones y manejarlas
        - Los errores sincronos se propagan entre los métodos
        - Los errores ascrincronos no, es necesario méter el catch en ellos

    PROCESOS HIJOS

        - Ejecutar otros procesos que no son los propios, crea un hilo para ellos
        - Se ejecutan con EXEC o con SPAWN

    MODULOS NATIVOS DE C++

        - Hay que instalar el node-gyp para manejarlos
        - Se usa node-gyp (lo instale y desinstale)

    HTTP (http.js)

        - Crear un servidor o conectarnos directamente desde nodejs sin pasar por otro archivo
        - require('http') para mandarlo llamar

    OS (os.js)

        - Para acceder a todo lo que hay dentro de la máquina, todo lo que hay en el sistema operativo, etc.
            - arch
            - platform
            - cpus
            - constants
            - freemem
            - totalmem
            - homedir
            - tmpdir
            - hostname
            - networkInterfaces
    
    PROCESS (processNode.js)

        - Podemos acceder a los procesos que se ejecutan en NODE
        - Podemos saber cuando se va a terminar el event loop (exit)
        - Podemos saber que proceso trono
        - NO NECESITA el require, unicamente el "process.EVENTO('NOMBRE_EVENTO')
        - EXIT - En este evento ya no se pueden ejecutar procesos asincronos

===== TIPS & RECORDAR =====

    node -v                 Versión del nodejs
    npm -v                  Versión del gestor de paquetes
    npm install -g nodemon  Instalación del Nodemon GLOBAL
    npm install -h pm2      Instalación del PM2 GLOBAL
    npm install -g node-gyp Para manejar modulos nativos de C++

    Ctrl + K + S    En lista los shortcuts que tiene visual y los puedes editar

    clearInterval()         Es una función que para el setInterval (modulos/globales.js)

    Nodemon         https://nodemon.io/
    PM2             https://pm2.keymetrics.io/

===== RESUMEN CLASES =====

1   -   Introducción, Articulo que habla de como instalar nodejs
2   -   Que es NODEJS, sus caracteristicas y un poco de historia
3   -   Conceptos del EVENT LOOP, funcionamiento, y conceptos del THREAD POOL, funcionamiento
4   -   MONOHILO, las desventajas y como funciona el interprete de nodejs, ejercicio (conceptos/monohilo.js)
5   -   VARIABLES DE ENTORNO, como se declaran, como se les pasa un valor en windows y bash, como se pone el valor por default (conceptos/entorno.js)
6   -   NODEMON, Instalación con npm, PM2, no lo instale, es para producción
7   -   CALLBACKS, Un ejercicio con las funciones asincronas, para ver como se regresan los valores en orden (async/callback.js)
8   -   CALLBACK HELL, Ejercicio ejemplo(comentado) de un callbackhell y como corregirlo un poco con una funcion de RECURSIVIDAD (async/callbackhell.js)
9   -   PROMESAS, Ejercicio con promesas (async/promises.js), no explica mucho de los estados, pero hay que recordar que son PENDING, FULLFIT, REJETED
10  -   ASYNC-AWAIT, Se utiliza para que las funciones asincronas se ejecuten en orden, Ejercicio (async/asyncAwait.js)
11  -   GLOBALES, la existencia de modulos que ya vienen precargados por nodejs, algunas funciones, el objeto GLOBAL que accede a todas ellas, clearInterval
12  -   FILE SYSTEM, Objeto que nos sirve para leer, crear, borrar archivos (modulos/fs.js)
13  -   CONSOLE, console.table, console.group - console.endGroup, console.count (modulos/consola.js), console.countReset()
14  -   ERRORES, sincronos y asincronos (modulos/errores.js)
15  -   PROCESOS HIJOS, SPWAN y EXEC, solo me funciono spawn corriendo desde el gitbash en nodemon 
        y solo comandos de linux (los de git no funcionaron ni los de node) (procesoHijo.js)
16  -   C++ MODULOS, pidio instalar phyton, no hice el ejercicio, tira muchos errores, desinstale el node-gyp
17  -   HTTP, modulo para crear un servidor (http.js)
18  -   OS, modulo para obtener datos del sistema operativo, de la computadora, etc. (os.js)
19  -   PROCESS, Cuando necesitamos obtener información de los eventons de NODEJS (processNODE.js)