=================== APUNTES DEL CURSO DE Javascript BASICO =======================

===== HERRAMIENTAS =====

    Javascript
    Chrome

===== CONCEPTOS DE LAS CLASES =====

INTERPOLACION (clase2.js, clase2.html)

    - Se utiliza para validar variables dentro de las cadenas
    - Se utilian comillas invertidas ``
    - Ejemplo:
        `${var1} ${var2}`

NUMEROS (clase3.js, clase3.html)

    - += Es como el ++ pero en este le dices el numero que quieres que aumente o es como:
         var = var + var2 
         var += var2
    - -= Igual al += pero restando 


FUNCIONES PARA NUMEROS (clase3.js, clase3.html)

    - Math.round    Redondea un numero con decimales
    - parseFloat    Convierte una variable a numero con decimales
    - toFixed       Convierte un numero a una cadena indicandole el numero de decimales que se quiere tener

FUNCIONES (clase4.js y clase4.html)

    - Son pedazos de codigo reutilizables
    - Se utiliza function para definirlas (function es una palabra reservada, no se puede utilizar como nombre de variables por ejemplo)

ALCANCE DE LAS FUNCIONES (clase5.js y clase5.html)

    - Si la variable no esta definida dentro de una funcion se le llama alcance GLOBAL
    - Se puede acceder desde cualquier funcion
    - Si la variable es global se le asigna al objeto global llamado WINDOW
    - SIDE EFECT - Es un efecto de lado/colateral, afecta variables que no estan definidas dentro de funciones
                   Cambiar el valor de una variable global dentro de un metodo
                   Si se agrega un parametro dentro del método con eso cambia

OBJETOS (clase6.js y clase6.html)
    - Los objetos se definen delimitados mediante llaves {}
    - Un atributo se compone de una clave (key) y un valor (value), que se separan entre sí por dos puntos “”:"".
    - Se puede pasar como parametro en una funcion uno de sus atributos o los que se necesiten!!
    - EJEMPLO: function imprimir({objeto.atributo}) {console.log(atributo)}
    - Tambien se puede enviar un nuevo objeto al llamar la funcion
    - EJEMPLO: imprimir({nombre: 'Roberto'})

DESESTRUCTURAR OBJETOS (clase7.js y clase7.html)

    - Se puede recibir un objeto en una funcion y si se quiere asignar uno de sus atributos a una variable, constante o let, se puede hacer:
        var {atributo} = objeto

PARAMETROS POR REFERENCIA (clase8.js y clase8.html)

    - Los objetos que pasamos a una funcion como parametros se pasan por refrencia, lo que quiere decir que sus atributos se ven afectados en la funcion
    - Si pasamos unicamente un atrbuto del objeto como parametro, el objeto no se ve afectado
    /SE PUEDE RETORNAR UN OBJETO NUEVO!! una referencia nueva, donde se modifica un atributo
    function cumpleanos2(persona) {
        return {
            ...persona, //crea un objeto diferente
            edad: persona.edad +=1
        }
    }

COMPARAR VARIABLES (clase9.js y clase9.html)

    - ==    con dos iguales (compara el mismo valor)
    - ===   con tres iguales (compara el mismo valor y el tipo)
    - La comparacion entre objetos depende de su referencia, REPASAR EJERCICIO 9!!



ESTRUCTURAS DE CONTROL (Inicia en la clase 12)

    - Nos permiten decidir el flujo de nuestro codigo:

    CONDICIONALES (clase10.js y clase10.html)

        - IF: desición
        - SWITCH (clase16.js y clase16.html)
    
    ARROW FUNCTIONS (clase12.js y clase12.html)

    ESTRUCTURAS REPETITIVAS

        - FOR: Nos permite ejecutar la tarea de manera repetitiva (clase13.js y clase13.html)
        - WHILE (clase14.js y clase14.html)
        - DO WHILE (clase15.js y clase15.html)

PROMPT

    - Sirve para mandar una ventanita de pregunta en la que ingresa un dato  (clase16.js y clase16.html)

ARRAYS (clase17.js y clase17.html)

    - Los arrays son estructuras que nos permiten organizar elementos dentro de una collección. 

FILTER ARRAY (clase18.js y clase18.html)

    - Funcion del array que nos permite filtrar un arreglo bajo una condicion
    - arreglo.filter()
    - Nos regresa igual un arreglo

MAP ARRAY (clase19.js y clase19.html)

    - Genera un nuevo arreglo
    - Puede alterar el mismo si modificas los atributos nada más (hay que usar ... para generar nuevos objetos)

REDUCE ARRAY (clase20.js y clase20.html)

    - Contabiliza el atributo de un objeto que se encuentra en un arreglo, o contabiliza un arreglo de numeros



CLASES EN JAVASCRIPT (clase21.js y clase21.html)

    - Cuando hablamos de objetos en Javascript hablamos de prototipos y no tanto de clases
    - Hay clases pero no existe la herencia como tal
    - Objeto.prototype.funcion GENERA UNA NUEVA FUNCION PARA EL OBJETO


THIS EN ARROW FUNCTION (No hice el archivo, porque no hizo nada nuevo)

    - Cuando el this esta dentro de un arrow function se vuelve el THIS global, el que apunta a WINDOW !!!

HERENCIA PROTOTIPAL (clase24.js y clase24.html)

    - No existen las clases en javascript ni la herencia, hay herencia prototipal
    - Object es el prototipo base de todos los objetos

HERENCIA NUEVA

    - A partir de ECMAScript2015 se mejora la herencia, se usa la palabra clave extends

EVENT LOOP (asincronismo en Javascript)

    - Java solo ejecuta una tarea a la vez (Single thread) y delega esas operaciones a otros procesos
    - JavaScript sólo puede hacer una cosa a la vez, sin embargo; es capaz de delegar la ejecución de ciertas funciones a otros procesos. 
      Este modelo de concurrencia se llama EventLoop.

===== TIPS & RECORDAR =====

    - Cuando hay un error en Javascript el codigo que sigue despues de esa linea ya no se ejecuta
    - NO HAY CLASES, todos son PROTOTIPOS

    - 1ra clase - "El asincronismo es el concepto primordial, divide un dev que esta aprendiendo con uno más pro"
    - 3ra clase - Las variables pueden ir declaradas e inicializadas en una sola fila
                  Las variables pueden cambiar de tipo
    - 4ta clase - La manera de almacenar decimales en javascript no estan precisa, ya que destina cierta cantidad de bytes en la memoria ram de la computadora
                  para asignar un decimal, para sobrepasar este problema hay un ejemplo en el archivo clase3.js
    - 13ra clase- Las constantes deben declararse con notacion de BD, NOMBRE_CONSTANTE
                  

    - Repositorio donde que se utiliza en el curso:              https://github.com/platzi/FundamentosJSCurso

    - CTRL + R = Limpia la consola de google!!!!!!!
    - ALT + UP = Mueve el codigo seleccionada hacia arriba!!!!
    

===== RESUMEN CLASES =====

1   -   Presentación
2   -   Nos brindan un repositorio de github
3   -   Variables (clase1.html y clase1.js), no hubo conceptos, fue ejercicio
4   -   EJERCICIO Strings - INTERPOLACION, chartAt, substr, toUpperCase, toLowerCase, length (clase2.js, clase2.html)
5   -   EJERCICIO Numeros - Javascript no almacena correctamente los decimales, Math.round, parseFloat, toFixed, +=, -= (clase3.js, clase3.html)
6   -   EJERCICIO Funciones - Funciones y parametros de las funciones (clase4.js y clase4.html)
7   -   EJERCICIO Alcande Funciones - SIDE EFECT, Variables Globales (clase5.js y clase5.html)
8   -   EJERCICIO Objetos - OBJETOS, NUEVA FORMA de enviar un objeto como parametro o recibirlo en una funcion (clase6.js y clase6.html)
9   -   EJERCICIO Desestructurar objetos - Generar un variable a partir de {} (clase7.js y clase7.html)
10  -   EJERCICIO Parametros por referencia - ...objeto , un objeto que pasa como parametro si pasa la refrencia (clase8.js y clase8.html)
11  -   EJERCICIO COMPARACIONES - revisar ejercicio! (clase9.js y clase9.html)
12  -   EJERCICIO CONDICIONALES - Nada nuevo, normal (clase10.js y clase10.html)
13  -   EJERCICIO FUNCIONES QUE RETORTAN VALORES - Magic numbers, Constantes, funciones más pequeñas (NO GENERE ARCHIVO)
14  -   EJERCICIO ARROW FUNCTIONS (ESTAN INCREIBLES!!!!!!!!!) (clase12.js y clase12.html)
15  -   EJERCICIO FOR (clase13.js y clase13.html)
16  -   EJERCICIO WHILE - Hay un ejemplo de DEBUGGER!!!!!!!!!!!!!! (clase14.js y clase14.html)
17  -   EJERCICIO DO WHILE - No hubo nada nuevo
18  -   EJERCICIO SWITCH - SWITCH, PROMPT!!! (clase16.js y clase16.html)
19  -   EJERCICIO ARRAYS - Las 2 formas de acceder al valor de un atributo de un objeto (clase17.js y clase17.html)
20  -   EJERCICIO FILTER ARRAY - Función para filtrar un arreglo (clase18.js y clase18.html)
21  -   EJERCICIO MAP ARRAY - Función para generar un nuevo arreglo a partir de una validación (clase19.js y clase19.html)
22  -   EJERCICIO REDUCE ARRAY - Función para contabilizar un atributo de un objeto, regresa un number (clase20.js y clase20.html)
23  -   EJERCICIO CLASES - Objeto.prototype.funcion GENERA UNA NUEVA FUNCION PARA EL OBJETO (clase21.js y clase21.html)
24  -   EJERCICIO MODIFICAR FUNCION - Cuando se cambia a una arrow function ya no se llama automaticamente la funcion (clase22.js y clase22.html)
25  -   EJERCICIO THIS ARROW FUNCTION - El problema de la clase pasada es que THIS cambia de conexto y se vuelve WINDOW
26  -   EJERCICIO HERENCIA MANUAL - Dar un repaso, es algo complicado (clase24.js y clase24.html)
27  -   EJERCICIO HERENCIA NUEVA - Herencia con CLASS, EXTENDS, SUPER, CONSTRUCTOR (clase25.js y clase25.html)
28  -   EJERCICIO FUNCIONES COMO PARAMETROS - Tambien se puede mandar una funcion como parametro (clase25.js y clase25.html)
29  -   VIDEO YOUTUBE ASINCRONISMO , Event loop