=================== APUNTES DEL CURSO DE Javascript BASICO =======================

===== HERRAMIENTAS =====

Javascript 5

===== CONCEPTOS DE LAS CLASES =====

JAVASCRIPT

    - Es un Lenguaje Interpretado:          Lo lee el navegador
                     Compilado:             Porque lo compila desde el navegador el motor V8 de Javascript 
                     Orientado a objetos:   Se generan clases y objetos
                     Debilmente tipado:     No se le asigna un tipo, y javascript interpreta el tipo
                     Dinamico:              Corre directamente en runtime (no se tiene que compilar) IMAGEN1.png
    - Lenguaje para generar páginas dinamicas
    - Solución para las páginas estaticas

FOWARD

    - Es compatible con versiones futuras
    - JS no lo es

BACKWARD

    - Puedes escibir codigo de versiones anteriores sin que se afecte el codigo nuevo
    - JS si lo es

¿Porque estudiar Javascript?

    - FRONT:        Tiene opciones como Angular, React y VUE
    - BACK:         Tiene NodeJS
    - MOVIL:        Tiene React Native (Aplicaciones de Android y IOS)
    - WEB DESKTOP:  Tiene Electron

ELEMENTOS DE UN LENGUAJE DE PROGRAMACIÓN

    - DATOS que se guardan en memoria
    - TAREAS (funciones)

VALORES PRIMITIVOS

    - String
    - Number
    - Boolean
    - VALORES VACIOS (EMPTY VALUES)
        -null
        -undefined

VALORES NO PRIMITIVOS O TIPO OBJETO

    - Arreglo []
    - Objeto {nombre: "Roberto"}

TYPEOF

    - Nos dice de que tipo es el valor que ingresamos

VARIABLES

    - Es la representación de algun lugar en memoria que vamos a reservar para guardar un valor
    - var es la palabra reservada de JS para entender que es una variable
    - ESTADOS DE UNA VARIABLE:
        -DECLARAR
        -INICIALIZAR

FUNCIONES

    - Son un conjunto de sentencias para generar acciones con las variables que se generaron
    - Hay dos tipos de funciones (funciones.js):
        - DECLARATIVAS (function declaration / function statement) : function + nombre + parentesis + llaves
        - EXPRESIVAS o ANONIMAS (function expression): var + nombre + function + parentesis + llaves
                                No se les da un nombre

DIFERENCIAS

    - Las funciones declarativas se pueden mandar llamar antes de que se declaren
    - Las funciones expresivas se tienen que declarar primero y luego mandar llamar.

HOISTING

    - Las funciones siempre se mueven arriba del scope. Por lo tanto, podemos elegir donde declararlas y usarlas.
    - La declaración de las variables se mueven arriba del scope, pero no la asignación. Antes de usar una variable, habrá que crearla y asignarla.

    - Se trata del comportamiento predeterminado para la declaración de las variables, funciones, y en general, la declaración de cualquier contexto en Javascript.
    - El hoisting solo aparece en funciones y variables del ecmascript 5 para abajo
    - El hoisting del ecmascript 6 en adelante aparece en funciones, variables, const y let

SCOPE

    - Es el alcance que tienen que tienen las variables
    - Hay dos tipos de scope:
        - GLOBAL: Se accede desde cualquier parte (Se genera una vez que nuestro archivo de javascript se inicialice en el navegador)
        - LOCAL: Dentro de una funcion (se inicializa cuando declaramos una funcion)

ECMASCRIPT
    - En el año de 1997 se crea un comité (TC39) en la ECMA para estandarizar JavaScript. A partir de entonces, los estándares de JavaScript se rigen como ECMAScript.
    - European Computer Manufacturers Association (ECMA)

COERCION (IMAGEN2.jpg)
    - Se da, gracias a que javascript es debilmente tipado
    - Forzar a que un objeto se comporte como si fuera de otro tipo
    - Cambia un valor de tipos
    - Hay dos tipos:
        - IMPLICITAS: (AYUDA)El lenguaje nos ayuda, cambia de un tipo de valor a otro tipo de valor
        - EXPLICITAS: (OBLIGANDO)Es la forma en que se obliga a cambiar un valor de tipo a otro tipo

Valores FALSY

    - 0 es      FALSY/FALSO     Boolean(0)
    - null es   FALSY/FALSO     Boolean(null)
    - NaN es    FALSY/FALSO     Boolean(NaN)
    - undefined FALSY/FALSO     Boolean(undefined)
    - false     FALSY/FALSO     Boolean(false)
    - ""        FALSY/FALSO     Boolean("")

Valores TRUTHY

    - Cualquier cadena no vacia                 TRUTHY     Boolean("hola")
    - " " (El espacio tambien cuenta como true) TRUTHY     Boolean(" ")
    - Números mayores a 0                       TRUTHY     Boolean(22)
    - Un Arreglo                                TRUTHY     Boolean([])
    - Un Objeto                                 TRUTHY     Boolean({})
    - Cualquier funcion                         TRUTHY     Boolean(function(){})
    - True                                      TRUTHY     Boolean(true)

OPERADORES

    - ARITMETICOS/BINARIOS:    + (suma) , -  (resta), * (multiplicación) , / (división)
                                Binarios porque es entre dos valores
                                
    - UNITY:        ! (negación)
                    Un solo operador con un solo valor
    - ASIGNACION:   = (igual)

    - COMPARACIÓN   == (comparar)  NOTA: puede comparar entre diferentes tipos, como numeros y strings (el valor perse)
                    === (comparar) Compara que los tipos y los valores sean iguales
                    < (menor que)
                    > (mayor que)
                    <= (mejor o igual)
                    >= (mayor o igual)
    - LOGICOS       && (and)
                    || (or)

                    ++ Incrementar en 1 un valor
                    +=2 Incrementar un valor en 2

CONDICIONALES (if.js)

    - Son reglas que nos sirve para validar si algo es cierto o falso (IF,ELSE IF, ELSE)
    - OPERADOR TERNARIO: Generar el if y el else en una sola linea (condicion ? true : false;)

SWITCH (switch.js)

    - Igual que el if nos sirve para validar
    - NOTA: Cuando no hay break en los case, entra en todas las validaciones y hace todo lo que esta ahi!!!

ARRAYS (array.js)

    - Es un tipo objeto que guarda varios valores
    - Hoy dos tipos de métodos para un arreglo:
        - MUTAR UN ARREGLO:
            - Con PUSH se agrega al final un valor al arreglo
            - Con POP eliminas el ultimo elemento del arreglo
            - Con UNSHIFT agregas al inicio del arreglo
            - Con SHIFT eliminas al inicio del arreglo
        - RECORRER EL CONTENIDO DEL ARRAY:
            - filter: filtra en base a validaciones sobre el atributo de un objeto (genera un nuevo array)
            - some:   filtra en base a validaciones sobre el atributo de un objeto (Solo regresa true o false)
            - map:    regresa un atributo de los objetos (genera un nuevo array)
            - find:   filtra en base al valor de un atributo del objeto (genera un nevo array)
            - forEach: NO MODIFICA EL ARRAY, solo lo recorre

LOOPS / CICLOS (loops.js) con FOR y FOR OF

    - Sirve para recorrer nuestro arreglo
    - Existen dos:
        - For con indice    : con el indice indicando la posición del arreglo
        - For of            : con los valores contenidos en el arreglo
        - For in            : itera OBJETOS!!!!!!! (no lo enseñan en el curso, viene en una pregunta)

LOOPS / CICLOS con WHILE

    - Igual recorre el arreglo mientras se cumpla una condición

OBJECTS (objects.js)

    - Es en base aun paradigma de objetos como se toman los objetos en javascript
    - Los objetos se manejan con variables
    - Un objeto puede tener atributos como funciones!!

FUNCION CONSTRUCTORA

    - Nos ayuda a generar varios objetos a la vez
    - Se genera el template del objeto
    - new genera una instancia de un objeto





===== TIPS & RECORDAR =====

    - V8 (Motor que se encarga de interpretar el codigo de Javascript en el navegador)
    - HAY UN CURSO DE V8!!
    - console.log ('Hola ${variable}'); Puedes imprimir la variable dentro del string
    - CONVERTIR una variable a String: String(a)    var a = 30;
                             a Number: Number(b)    var b = "200";
    - NaN: NOT A NUMBER

    - HOISTING   https://medium.com/@anhurtado/qu%C3%A9-es-el-hoisting-en-javascript-aeae1af4ae3e





===== RESUMEN CLASES =====

1   - Que es JAVASCRIPT, FOWARD Y BACKWARD
2   - ¿Porque estudiar Javascript?
3   - Instalo Visual Studio Code y VALORES PRIMITIVOS y OBJETO (valores.js)
4   - VARIABLES, Estados de una variable (variables.js)
5   - FUNCIONES, TIPOS de funciones (funciones.js)
6   - HOISTING, diferencia entre una funcion declarativa y una expresiva (hoisting.js)
7   - SCOPE, Locales y Globales
8   - HOISTING (Especifico, en la clase 6 era de diferencias de las funciones)
9   - COERCION
10  - THRUTHY / FALSY
11  - OPERADORES (Esta clase no esta tan buena, hay que hacer observacion)
12  - CONDICIONALES (if.js)
13  - SWITCH (switch.js)
14  - ARRAYS (array.js)
15  - LOOPS / CICLOS (loops.js)
16  - WHILE
17  - OBJECTS (objects.js)
18  - FUNCION CONSTRUCTORA
19  - FILTER & MAPS para ARRAYS
20  - FIND, FOREACH & SOME para ARRAYS