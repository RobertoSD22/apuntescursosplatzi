=================== APUNTES DEL CURSO DE GIT/GITHUB =======================

===== HERRAMIENTAS =====

    - GIT                   V 2.26.1
    - Visual Studio Code    V 1.44.1


===== COMANDOS =====

!               - +Numero de comando - En conjunto con el comando "history" te permite ejecutar uno de los comandos de la lista en base al numero listado (por ejemplo "!89")
cat             - + Nombre_archivo -  Te muestra el contenido de un archivo de texto 
cd              - Sirve para navegar entre directorios, "CHANGE DIRECTORY"
cd /            - Nos manda al home (tal cual lo escribi, con espacio despues del cd), en git bash nos muestra una / sobre la linea verde
cd /c           - Te manda al disco duro con el nombre, tambien podría ser cd /d por ejemplo
cd .            - Es la carpeta donde te encuentras
cd ..           - Es la carpeta anterior o la padre (El espacio importa en Linux y Unix, en Windows es todo pegado)
clear           - Limpia la consola
history         - Te enlista todos los comandos que has ejecutado anteriormente
ls              - Muestra los archivos que se encuentran en la ruta donde nos encontramos
ls -l           - Lista los archivos (en forma vertical) ("l" es un argumento sobre el comando)
ls -a           - Muestra los archivos ocultos ("a" es un argumento sobre el comando)
ls -al          - Indica que nos liste tambien los ARCHIVOS OCULTOS y LISTADOS ("al" es un argumento sobre el comando)
mkdir           - Crea carpetas "MAKE DIRECTORY"
pwd             - Muestra en que ubicación te encuentras dentro de la maquina
rm              - + Nombre_archivo - Borra el archivo que le digas
touch           - Crea archivos (DE TODO TIPO!!!, solo hay que agregar la extensión)

comando --help  - Te indica todas las combinaciones de argumentos que hay para el comando y una descripción
Ctrl + l        - Limpia la consola (otra forma de limpiar la consola) ES UNA COMBINACIÓN DE TECLAS! no un comando
Esc + Shift +zz - Te saca de del editor de textos llamado "vim", este editor lo manda por default si haces un commit y no agregas un comentario
i               - VIM - hace que puedas editar!

===== CONCEPTOS DE LAS CLASES =====

git init                        - Se crea el repositorio (se genera el archivo .git) y el staging (IMAGEN1)
git add                         - +archivo - El archivo pasa a vivir en staging (git empieza a revisar si hay cambios o no hay)
git add .                       - Agrega todos los cambios hechos a los archivos hechos en ese directorio
git reset HEAD --               - +archivo - Devuelve a su estado anterior al archivo (por ejemplo si estaba en "untracket" lo pasa a ese, si estaba en "unstaged" a ese)
git reset ARCHIVO CODIGO --hard - Vuelve a una versión anterior del archivo o de la rama, no guarda nada, elimina hasta el log!!!
git reset ARCHIVO CODIGO --soft - Vuelve a una versión anterior del archivo o de la rama, pero  deja en staging lo que haya 
git rm --catched                - +archivo - Remueve el archivo de staging, lo manda a UNTRACKET (aun que tenga cambios y tenga todo un historial)
git rm --force                  - +archivo - Eimina el archivo de git y del disco duro, guarda que existio alguna vez por si lo queremos RECUPERAR
git commit                      - +archivo - El archivo pasa de staging al repositorio (se genera una nueva versión de cambios)
git commit -am                  - +archivo - Hace el commit + el add al mismo tiempo (solo funciona con archivos que ya se les hizo el add previamente (que esten Tracked))
git checkout                    - Con este comando te traes los ultimos cambios que hubo en el repositorio
git checkout CODIGO             - Vuelves a la versión de ese archivo, si le das commit se queda así, sino para regresar usas:.
git checkout master             - Vuelves a la versión más reciente
git status                      - Nos permite ver el estado de  nuestros archivos
git config                      - Te muestra los argumentos para las configuraciones que existen para git
git config -l                   - Te muestra las configuraciones que existen (IMAGEN4)
git config -l --show-origin     - Te muestra donde estan guardadas las configuraciones fisicamente
git diff                        - +hashArchivo1 +hashArchivo2 te muestra las diferencias entre ambas versiones, los hashes salen del git log del archivo que quieres comparar
git log                         - +archivo - Te muestra la historia de ese archivo, como ha ido cambiando
git log --stat                  - Te muestra los cambios en "bytes" que hubo exactamente en cada commit
git show                        - +archivo - Te muestra todos los cambios que hubieron en un archivo

---- SERVIDOR REMOTO BASICO (5) ----
git clone urlservidorremoto     - Para descargar el repositorio desde un servidor remoto como github, gitlab, bitbucket
git push                        - Para enviar los cambios al repositorio remoto (IMAGEN5)
git fetch                       - Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).(IMAGEN5)
git merge                       - Combina los cambios de nuestro repositorio local con el del repositorio remoto para ponerlo en nuestro directorio de trabajo (IMAGEN5)
git pull                        - Funciona los comandos fetch y merge para ejecutar uno solo, como push


---- SERVIDOR REMOTO (6) ----
git remote add origin urlserv   - Para enlazar el repositorio a un servidor remoto (EL PROYECTO ya tiene que estar creado)
git remote                      - Te muestra "origin" que en teoria es donde se enlazo
git remote -v                   - Te muestra la url del servidor remoto al que esta enlazado
git push origin master          - Git envia a origin (el servidor remoto), los cambios que hay en master
git pull origin master          - Para obtener los cambios desde origin hacia master
git pull origin branchname --allow-unrelated-histories
                                - Para cuando manda un error porque tienen archivos diferentes el local con el servidor remoto (LA PRIMERA VEZ QUE SE ENLAZAN)

---- BRANCHES (3) ----
git branch                      - Te muestra que ramas existen y pinta en verde (git bash) la rama en la que te encuentras
git branch                      - +NombreRama genera una nueva rama a partir del punto en el que estas en Head (IMAGEN6)
git checkout                    - +NombreRama te puedes mover entre ramas

STAGING                 - Es un area en memoria ram que utiliza git para preparar los archivos y enviarlos a repositorio
MASTER                  - Es el nombre por defecto del repositorio donde guardamos nuestros archivos con sus cambios
ARCHIVOS UNSTAGED       - Cuando los archivos tienen cambios o no son la ultima versión del respositorio pero ya se les dio un git add en algun momento
ARCHIVOS UNTRACKET      - Cuando un archivo aun no se rastrea por GIT, no se les ha dado git add nunca (no esta visualizado por git IMAGEN2)

MERGE

    - El merge se hace desde la rama que se quiere que guarde los cambios, por ejemplo si hago un merge desde MASTER a mi rama de desarrollo, 
      los cambios vendran a MASTER, generando un nuevo punto (como si hubieramos hecho cambios)
    - Un merge es un commit a la rama donde estas fusionando los cambios!
    - La rama de donde se tomaron los cambios NO DESAPARECE!!

    *********** RAMAS ***********
    - A veces necesitas una rama para experimentos (development) y una rama para corregir bugs (hotfix en la industria) (IMAGEN3)
    - BRANCH            - Es una rama del proyecto
    - MERGE             - Cuando combinas dos branches (IMAGEN3)
    - CHECKOUT          - Creas una nuevo branch
    - MASTER            - La rama/branch que va a producción
    - DEVELOPMENT       - La rama/branch que contiene las nuevas features, caracteristicas y experimentos
    - HOTFIX            - La rama/branch en la que se arreglan los bugs y que se tienen que unir a la rama master tan printo como sea posible


SERVIDOR REMOTO/REPOSITORIO REMOTO

    -  Un nuevo estado que deben seguir nuestros archivos para conectarse y trabajar con equipos de cualquier parte del mundo.
    -  Estos servidores remotos pueden estar alojados en GitHub, GitLab, BitBucket.

===== TIPS & RECORDAR =====

- En windows se usa c:\  pero en linux y unix unicamente se usa \
- Por defecto gitbash te abre la carpeta en windows de tu usuario (C:\User\Roberto   por ejemplo)
- En windows las mayusculas y minusculas no importan cuando se trata de nombres de carpetas (EN LINUX Y UNIX SI, puedes tener la carpeta "User" con mayuscula y "user" con minuscula y son diferentes)
- .gitignore tambien cuenta como un archivo para ser trackeado
- En la clase 9 en los comentarios del video dice que se le puede cambiar el nombre e la rama MASTER!
- Los cambios "ATOMICOS" es que cada archivo se guarda de manera independiente
- En los comandos cuando usas un "-" usas la letra inicial, cuando usas "--" usas la palabra completa
- GIT SHOW - cuando los cambios son muy largos vas navegando con las flechas, y para salirse tiene que dar la tecla "q"

===== RESUMEN CLASES =====

7   - Una clase rápida de linea de comandos
8   - Git init, que es el staging y los repositorios (a partir de aqui cree el repositorio para los apuntes)
9   - Ramas, merge, hotfix, development
10  - Practicando el git init, git add, git rm --cached, git commit -m, git config, git add ., git log
11  - Practicando con git show, git diff y git log
12  - Git RESET SOFT y HARD, GIT CHECKOUT +CODIGO
13  - Direferencia entre git rm y reset, RM los borra del disco, reset cambia a un estado anterior.
14  - SERVIDORES REMOTOS (GitHub, GitLab, BitBucket), descripcion de los comandos PUSH, FECTH, MERGE y PULL
15  - BRANCH, Creación, commit -am (para hacer el add al mismo tiempo), cambiarnos entre ramas con git checkout,
      cree la rama desarrollo e integramos el div de cabecera, esc + i para insertar codigo en vim (IMAGEN6)
16  - MERGE, hice merge sobre la rama master combinando los cambios que habia en la rama desarrollo, me salio un conflicto
      intente repararlo desde Visual Studio Code pero quito los cambios que hice en MASTER, igual funciono pero no es lo mejor
      me falta aprender como quitar los conflictos.
17  - CONFLICTOS, soluciono un conflicto sencillo, y uso visual studio para poder arreglarlo (hizo solo el merge sobre master, falta el merge sobre la otra rama)
18  - ENLAZAR SERVIDOR REMOTO, "git remote add origin urlservidor" para enlazar con GitHub, HUBO PROBLEMA y se uso el "git pull origin master --allow-unrelated-histories",
      este problema pasa cuando al parecer no ha habido push al servidor y se tiene un archivo (README.md) nuevo en el servidor remoto