=================== APUNTES DEL CURSO =======================

===== HERRAMIENTAS =====

    Open JDK 8 y 11
    IntelliJ Versión: 2020.1.2

===== CONCEPTOS DE LAS CLASES =====

JAVA

    - Java es un lenguaje de programación orientado a objetos
    - Java es un lenguaje de alto nivel (el lenguaje de bajo nivel es lenguaje de maquina) (los lenguajes alto nivel son faciles de manipular, modernos, etc)
    - Tiene dos CATEGORIAS:
        ~ Java SE (Standard Edition)    Construye aplicaciones de escritorio o consola
        ~ Java EE (Enterprice Edition)  Se construyen aplicaciones en web, distribuidas, la interacción con el usuario es más amigable
    - James Gosling fue el creador
    - Creado en 1991
    - Es multiplataforma (corre en cualquier sistema operativo) 
      WORA (Writte Once Run Anywhere)
    - 2010 lo adquiere ORACLE (compra SunMicrosystems)
    - Java es un lenguaje COMPILADO (javascript, PHP son interpretados)

JDK

    - Java Development Kit
    - Se compone de 3 cosas:
        ~ JRE (Java Runtime Environment)    Es la máquina virtual de java, lo que lo hace ser multiplataforma.
        ~ Compilador de Java                Es el que hace que nuestro codigo se traduzca a bytecode, se lo pasa a la JRE para que lo corra
        ~ API de desarrollo                 Es una base o clases para que podamos empezar a codificar

VERSIONES LTS

    - Son las versiones a las que se les da soporte por 3 años, versiones en las que podemos confiar
    - La versión 8 y 11 son versiones LTS
    - La versión 11 es la primera que tiene LICENCIA (que va a cobrar!!)

OpenJDK

    - Es la versión de java jdk que no cobra, impulsada por James Gosling


HERRAMIENTAS MAS USADAS

    - Java 8 y 11
    - Maven y un poco menos Gradle
    - Spring y Hibernate
    - IDE (Entorno de Desarrollo Integrado / Integrate Development Environment)
      Es un entorno de programación que ha sido empaquetado como un programa de aplicación
      TIENE:
        ~ Un EDITOR DE CODIGO, mas amigable con colores más didacticos y ayudas de donde estas fallando
        ~ Tiene un COMPILADOR para que no lo ejecutes aparte
        ~ Un DEPURADOR
        - Un CONSTRUCTOR DE INTERFAZ GRÁFICA, para los programás que necesitan interfaz con java
       Hay 3 en esta carrera:
        ~ Eclipse
        ~ Netbeans
        ~ IntelliJ IDEA


Método MAIN

    - Es el punto de entrada de nuestra aplicación en Java
    - No es exclusivo de Java, hay otros lenguajes de programación que lo usan como Kotlin o Dart
    - Si se ejecuta la aplicación y no existe el método lanza la excepción 
      "In class NoMain: void main (String args[]) no esta definido"


ETAPAS de la creación de codigo en JAVA

    - Cuando damos "RUN" se activa el compilador de java (IMAGEN 1)
    - bytecode es el lenguaje que puede leer nuestra computadora
    - COMPILAR nos ayuda a saber que el codigo no tiene errores
    - .class contiene el BYTECODE y no expone el codigo fuente


VARIABLES

    - Un espacio de memoria al que le asignamos un contenido
    - Las variables en Java se compondrán de un:
        ~ NOMBRE
        ~ VALOR
    - Los nombre de las variables deben ser unicos


CONVENCION DE NOMBRES EN JAVA

    - En sensible a mayusculas y minusculas
    - Las variables deben comenzar con letra, $ o _
    - Se usa camelcase
    - Las variables pueden ser "Variables constantes", se utilizan MAYUSCULAS


Técnica de Naming: Camel Case

    Upper Camel Case    Empieza con mayuscula (Se usa nombrando Clases)
    Lower Camel Case    Empieza con minúscula (Se usa nombrando Variables, Métodos)


TIPOS DE DATOS NUMERICOS (IMAGEN 2)

    byte: Ocupa 1 byte de memoria y su rango es de -128 hasta 127.
    short: Ocupa 2 bytes de memoria y su rango es de -32,768 hasta 32,727.
    int: Ocupa 4 bytes de memoria y su rango es de -2,147,483,648 hasta 2,147,483,647. 
         Es muy cómodo de usar, ya que no es tan pequeño para que no quepan nuestros números ni tan grande como para desperdiciar mucha memoria. Puede almacenar hasta 10 dígitos.
    long: Ocupa 8 bytes de memoria y su rango es de -9,223,372,036,854,775,808 hasta 9,223,372,036,854,775,807. 
          Para diferenciarlo de un tipo de dato long debemos terminar el número con la letra L.

    (IMAGEN 3)
    float: Ocupan 4 bytes de memoria y su rango es de 1.40129846432481707e-45 hasta 3.40282346638528860e+38. Así como long, debemos colocar una letra F al final.
    double: Ocupan 8 bytes de memoria y su rango es de 4.94065645841246544e-324d hasta 1.79769313486231570e+308d.


TIPOS DE DATOS CHAR Y BOOLEAN

    char: Ocupa 2 bytes y solo puede almacenar 1 dígito, debemos usar comillas simples en vez de comillas dobles. El rango es de los -65,436 a los 65,436
    boolean: Son un tipo de dato lógico, solo aceptan los valores true y false. También ocupa 2 bytes y almacena únicamente 1 dígito.


DATOS COMODINES PARA VAR

    - Los da por defecto a la hora de generar el var (no lo dice en la clase, solo menciona algo en la clase 15 minuto 7:30)
    INT
    DOUBLE


OPERADORES DE ASGNACIÓN (IMAGEN 4) (IncrementDecrement.java)
    - +=    Equivale a:  a = a + b
    - -=    Equivale a:  a = a - b
    - *=    Equivale a:  a = a * b
    - /=    Equivale a:  a = a / b
    - %=    Equivale a:  a = a % b


OPERADORES DE INCREMENTO Y DECREMENTO(IMAGEN 5) (IncrementDecrement.java)

    - ++    Equivale a: a = a + 1
    - --    Equivale a: a = a - 1

    FORMAS de utilizar operadores: PREFIJO Y POSFIJO

    - Prefijo:  Antes de la variable ++i    POR EJEMPLO: int a = 100 + ++i      Incrementaria i antes de llevar acabo la asignación
    - Posfijo:  Después de la variable i++  POR EJEMPLO: int a = 100 + i++      Incrementaria i hasta despues que se haga la asignación

OPERADORES DE EQUIDAD (LogicOperations.java)

    - ==    Igualdad
    - !=    Desigualdad

OPERADORES RELACIONALES (LogicOperations.java)

    - <     Menor que
    - >     Mayor que
    - <=    Menor o igual que
    - >=    Mayor o igual que

OPERADORES LOGICOS (LogicOperations.java)

    - &&    AND
    - ||    OR
    - !     NOT


MATH (MathematicOperacions.java)

    - Sirve para hacer operaciones Aritmeticas
    - Esta: 
         ~ PI           (para saber el valor de PI)
         ~ E            (para saber el valor de numero Exponencial de Euror)
         ~ Math.ceil    (recondea hacia arriba un número)
         ~ Math.floor   (redonde hacia abajo un número)
         ~ Math.pow     (obtiene la potencia de un número, primero el numero y luego la potencia)
         ~ Math.sqrt    (obtiene la raiz cuadrada de un número)
         ~ Math.max     (obtiene el mayor entre dos números)

CAST NUMEROS (Casting.java)


    - En la programación hay situaciones donde se necesita cambiar el tipo de dato (por Estimación o Exactitud)
    - Cuando necesitas un número exacto casteas a doble
    - Cuando necesitas un número estimado casteas a int

CAST ENTRE TIPOS DE DATOS (IMAGEN 6)

    - Una variable de menos rango puede caber en una de mayor rango (como byte en short)
    - CAST AUTOMÁTICO = CUANDO OCURRE este escenario no es necesario agregar el CAST explicito, por ejemplo: int numero = 101; long = numero; <--- sin usar (long)
    - CAST EXPLICITO = CUANDO ES AL REVES, si es necesario agregar el cast, por ejemplo: long a = 10110010; int b = (int) a;

    - SI asignas el valor sin hacer el cast se pierde la EXACTITUD                                                                  IMPORTANTEEEEEEEEEEEEE
    - SI asignas haciendo el cast conserva la EXACTITUD                                                                             IMPORTANTEEEEEEEEEEEEE
    - Si casteas un char a int , el número que aparece es el codigo ASCII del número que esta en el char, NO el número como tal     IMPORTANTEEEEEEEEEEEEE
    - CHAR no cabe en SHORT a pesar de que ambos sean de 2 bytes de capacidad (char va de los 65,000 y short a los 32,000 por eso)  IMPORTANTEEEEEEEEEEEEE


JAR

    - Abreviatura de JAVA ARCHIVE
    - Son un tipo de comprimido donde utilizan el formato ZIP
    - Contienen codigo complicado de java (*.class)

    ¿COMO HABILITO LA OPCIÓN PARA QUE MI PROYECTO GENERE UN JAR? (Solo en intelliJ, no sabemos si funciona en otro IDE)

    1-  Click en el menú FILE
    2-  Click en la opción "Porject Structure"
    3-  En el menú de la izquierda, en la opción "Artifact" (aparece vacia cuando la seleccionas)
    4-  Click en el "+" de la parte de arriba
    5-  Despliega un Menú donde viene la opción "JAR"
    6-  En la opción "from modules with dependencies" (Es para que se encargue de seleccionar la clase con método MAIN que usaras para tu JAR)
    7-  Aparece una pantalla para que selecciones la clase principal (La opción dice: Main Class) y abre las clases que tienes y seleccionas la que
        contiene el método main
    8-  Luego das click en el botón OK, y en la ventana de atrás otra vez OK
    9-  Crea la carpeta "META-INF" con el archivo adentro "MANIFEST"
    10- HASTA AQUI SE HABILITO LA OPCIÓN PARA GENERAR EL JAR

    ¿COMO LO GENERO?

    1-  Click en el menú Build
    2-  Click en el submenu Build Artifacs
    3-  Aparece una especie de menú pequeño donde se le da "Build" (dice Actions, en la parte de arriba del menú)
    4-  En la carpeta "OUT", agrega el archivo JAR creado :O

    ¿COMO LO CORRO?
    1-  En la consola hay que posicionarse dentro de la carpeta que contiene el JAR (Si hasta adentro donde se encuentra el archivo)
    2-  Ahi con el comando java -jar NOMBE_JAR.jar  y listo!!!!!!! lo corre

    MANIFEST

        - Contiene las instrucciones de como funciona nuestro JAR
    
    NOTA: Es importante que la versión sea la misma o superior cuando ejecutamos el jar


IF (IfStatement.java)

    - Las condicionales son la forma en las que computadoras toman decisiones


SCOPE

    - Es el alcance de la variable, puede estar a nivel de método, a nivel de condición o a nvidel de clase


FUNCIONES (IMAGEN 7)

    - Les dijo funciones pero yo más bien creo que son Métodos
    - Sirven para organizar y modularizar el código además de evitar código repetido y reutilizar
    - Se componen de:
        ~ MODIFICADOR DE ACCESO
        ~ PARÁMETRO DE RETORNO
        ~ NOMBRE
        ~ PARAMETRO O PARAMETROS DE ENTRADA

JAVADOC

    - Es una buena practica documentar el código
    - Nos ayuda a comprender que hace el código
    - Genera documentación HTML
    - Hay 3 formas de generar documentos:
        ~ //        de una sola linea
        ~ /**/      de multiples lineas
        ~ /** */    DOCUMENTACIÓN DE JAVADOC

¿COMO HABILITAR QUE MUESTRE EL JAVADOC EN INTELLIJ? (que lo muestre en el pop up cuando te posicionas sobre el método o clase)

    1- Click en el menú File
    2- Click en la opción settings
    3- Opción EDITOR < GENERAL < CODE COMPLETION
    4- Seleccionar el check "Show the documentation popup in ---- ms"

WHILE & DO WHILE

    - DO WHILE al menos entra una vez, mientras que WHILE no entra a menos que se cumpla la condición

SCANNER

    - Con esa clase recibimos datos del teclado en la consola
    - Scanner sc = new Scanner(System.in);
      int opcionSeleccionada = Integer.valueOf(sc.nextLine()) //con esta obtener la linea capturada

OPERADOR TERNARIO

    - Sirve para evaluar como el IF!, es el que utilizamos en una sola linea, con ? : 


FOR

    - Igual al do while y al while pero nos permite manejar el número de ciclos!!!!


ARREGLOS

    - Son objetos en los que podemos guardar más de una variable, una lista de elementos
    - Si guardas arrays dentro de arrays se vuelven multidimensionales
    - Se definen como: TipoDato[] nombreVariable = new TipoDato[capacidad];
                       TipoDato[][] cities = new String[númeroFilas][númeroColumnas];

INDICE

    - La posición en la que se encuentra un valor en el arreglo
    - Empieza en 0



===== TIPS & RECORDAR =====

    - AFIANZAR conocimientos, para eso este curso
    - Los métodos staticos solo mandan llamar otros métodos staticos!!!!!!!!! :O (por ejemplo main, si llama otro método debe ser estatico) IMPORTANTEEEEEEEEEEEEE

    JRE Java Runtime Enviroment
    JDK Java Development Kit
    IDE Integrated Development Enviroment
    jar Java Archive

===== RESUMEN CLASES =====

1   -   Historia de Java, QUE ES Java, creación, creador, compra por Oracle, CATEGORIAS de Java, su presentación fue muy pequeña!!!
2   -   JDK, JRE, Compilador, API de desarrollo, OPENJDK, Versiones LTS
3   -   HERRAMIENTAS MÁS USADAS, versiones de java 8 y 11, Maven y Gradle, Spring y Hibernate, Ecipse Netbeans y IntelliJ IDEA
4   -   INSTALACIÓN IntelliJ, OpenJDK 8 y OpenJDK 11 (no tuve problemas, todo lo puse en D: )
5   -   INSTALACIÓN de lo mismo pero en MAC (no lo segui, solo vi el video)
6   -   INSTALACIÓN de lo mismo pero en Linux (no lo segui, es una lectura)
7   -   MÉTODO MAIN, Hola mundo con IntelliJ
8   -   ETAPAS para la programación en JAVA, conceptos de COMPILADO e INTERPRETADO, BYTECODE, .class
9   -   JShell, sirve para probar pequeños codigos, pero no me funciona, le doy enter y no ejecuta el codigo (solo funciona con java 9 en adelante)
        tambien dicen que cambien a través de la consola la versión de Java, yo solo la pude cambiar con las variables de entorno
10  -   VARIABLES, conceptos y ejercicio en el IntelliJ (se llama Variables.java)
11  -   ACTUALIZANDO VARIABLES, muy facil, solo actualizo int´s y Strings, el ejercicio es el UpdatingVariables.java
12  -   CONVENCION DE VARIABLES, se usa camelCase, pueden usarse $ o _ PERO nunca deben iniciar con numero, 
        las variables constantes se utilizan MAYUSCULAS
13  -   CAMEL CASE - Upper Camel Case (para clases) Lower Camel Case (para metodos y variables)
14  -   TIPOS DE DATOS NUMERICOS, byte(1 byte), short(2bytes), int(4bytes), long(8bytes), float(4bytes), double(8bytes) ... 10 posiciones para int, -128 a 127 para byt
15  -   TIPOS DE DATOS CHAR Y BOOLEAN char (2 bytes), boolean (2 bytes), var a partir de la versión 10 de java
16  -   OPERADORES DE ASIGNACIÓN y OPERADORES DE INCREMENTO Y DECREMENTO, +=, -=, /=, %=, *=, ++, --, a++, ++a (Estos ultimos son las FORMAS de usarlo) (IncrementDecrement.java)
17  -   MATH, revisamos algunas funciones y constantes de la clase Math, PI, E, Math.ceil, Math.floor, Math.pow, Math.max y Mat.sqrt (MathematicOperations.java)
18  -   CASTING (con numeros int y double), ejemplos de EXACTITUD (casteando a doble), ejemplos de ESTIMACIÓN (casteando a entero) (Casting.java)
19  -   CASTING 2, Vimos más casteos, donde no es neceario ser explicito, donde si lo es, cuando casteas un char a int, char no cabe en short
        el char no cabe en el short porque el char va de los 65,000 caracteres y el short hasta los 32,000
20  -   JAR, que es, conceptos, como hacer que el proyecto en intelliJ cree un JAR y como correr JAR desde consola
        NOTA: Es importante que la versión sea la misma o superior cuando ejecutamos el jar
21  -   EJERCICIO, da 3 ejercicios, 1 de variables, 1 de cast y el ultimo una pregunta rara que no respondi.
22  -   IF, un ejercicio de como se utiliza el IF (IfStatement.java)
23  -   SCOPE, lo vimos a nivel condición y a nivel método, ELSE vimos como funciona
24  -   OPERADORES! , Relacionales, Equidad y Logicos, IF ELSE (LogicOperations.java)
25  -   SWTICH, un ejercicio con el, muy sencillo el ejercicio, no explica mucho. (SwitchStatement.java)
26  -   FUNCIONES, no se porque le llama así, se supone que se llaman métodos. Conceptos y como se componen (no hizo ningun ejercicio)
27  -   EJERCICIO de FUNCIONES lo hicimos utilizando la clase Math, estuvo sencillo (Funciones.java)
28  -   JAVADOC , para que sirve, los 3 tipos de comentarios y cual es el bueno en JAVADOC (aun no dice como generar la documentación en HTML)
29  -   JAVADOC2, como habilitarlo en IntelliJ.. pero no dijo como generarlo
30  -   JAVADOC3, solo es una redacción donde vienen los tipos de comentarios que se pueden poner... (IMAGEN8)
31  -   DO WHILE expicación, WHILE explicación, CLASE SCANNER!! permite recibir datos desde la consola (copie la clase DoWhileLoop.java)
32  -   WHILE ejercicio y OPERADOR TERNEARIO (el de ? : )
33  -   FOR ejercicio, no lo hice, estaba muy sencillo
34  -   BREAK, CONTINUE, RETURN - Es una redacción MUY cortita de como se usan, casi no viene nada de "CONTINUE" me quedo con dudas
35  -   ARREGLOS, pura explicación de como funcionan, SON OBJETOS eso es importante recordarlo, bidimensionales, tridimensionales, etc.
36  -   DELCARACIÓN ARREGLOS, un ejercicio para saber como se declaran, no estuvo dificil, no hice el ejercicio
37  -   INDICES, la posición de un valor en el arreglo!, explicación y un ejercicio secillo
38  -   FOR ANIDADOS, Agrego al ejercicio anterior de arreglos bidimensionales los for anidados, toca el tema de FOR EACH
39  -   DESPEDIDA, Solo nos dijo que continuaramos con el siguiente curso