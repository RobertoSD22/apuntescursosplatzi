=================== APUNTES DEL CURSO DE Javascript BASICO =======================

===== HERRAMIENTAS =====

- Google Chrome (devtools)

===== CONCEPTOS DE LAS CLASES =====

HISTORIA DE Javascript

    - Se crea en muy poco tiempo
    - El primer navegador fue Mosaic, se le integra javascript hasta su versión 2 del navegador
    - Javascript nace a finales de 1995 y principios de 1996
    - (IMAGEN1) Javascript es creado por Brendan Eich (Se pruncia "Brendan AIK")
    - (IMAGEN2) Brendan Eich, antes de Javascript genero un lenguaje llamado "Mocha" (moka)
    - Brendan Eich, despues de mocha hizo livescript y posterior a ese sale javascript
    - Le llaman "JAVASCRIPT" gracias a que JAVA estaba en auge y para que fuera aceptado por la comunidad
    - ECMA entra en 1997 para decir que el unico lenguaje va a ser Javascript y que ellos diran los standares de ese lenguaje

    - V8 nace en 2008

ECMA

    - Es un grupo que nace para ponerle orden al lenguaje de javascript
    - Dictaminaron que javascript es el lenguaje que correria en el navegador

ECMAScript

    - Es una especificación estandarizada por Ecma International

JAVASCRIPT ENGINE (IMAGEN 3)

    - Es el motor de javascript, siempre corre en el navegador
    - Es un interprete entre el codigo generado en tu JS y el navegador (IMAGEN 3) tambien es llamado:
        -  Just in time compiler

V8
    - El motor de javascript que corre en el navegador de Chrome
    - Es opensource por lo que otros navegadores lo han adoptado, como Opera o Edge
    - Nace gracias a google maps, para que google maps corra más rápido (en la parte de renderizar los mapas y otras funciones)

FUNCIONAMIENTO DEL V8 (IMAGEN 4)

    1.- Una vez que corre el archivo en el engine, antes de empezar a traducir, el motor GENERA UN ENTORNO GLOBAL, 
    2.- Se genera el objeto principal que se llama WINDOW
    3.- Despues genera una variable que se llama "this" que es igual a WINDOW
    4.- Empieza a correr nuestro código en el contexto de ejecución y lo corre a traves de un stack de tareas (las apila una por una)
    5.- Genera un PARSEO del documento completo, o cual le ayuda a encontrar las claves principales (key words)
    6.- Se genera el Arbol de sintaxis abstracta (AST) con las key words, el cual va a parsear el navegador despues
    7.- El INTERPRETE lee linea por linea el arbol 
    7.1.- En paralelo El PROFILER optimiza el código y es donde JUSTAMENTE entra el HOISTING
    8.- Al final genera Bytecode el cual entiende la maquina

OBJETO GLOBAL WINDOW Y VARIABLE THIS

    - WINDOW Ya trae funciones por defecto que se pueden utilizar sobre el codigo JS que uno genere
    - THIS es una variable que hace referencia a window
    - Puede mandarse llamar como window o como this

HOISTING

    - Cuando empieza a correr el motor de javascript y encuentra lo que parecen ser variables no declaradas y/o inicializadas, 
      las declara e iguala a UNDEFINED para que reserve en memoria el espacio 
      (MEMORY HEAP - el proceso donde java guarda variables y funciones en memoria)
    - En las funciones no hay problema, ya que primero las guarda en memoria y luego revisan de que tratan para mandarlas llamar.

    - HOISTING SOLO OCURRE CON LAS VARIABLES Y FUNCIONES
    - Cuando se trata de CONSTANTES manda error ya que dice que primero se debe inicializar para ser utilizada

MEMORY HEAP

    - Donde se guardan los valores de todas nuestras variables, constantes y lets, así como las funciones
    - No se guarda de forma numerica o lineal, se guardan en diferentes partes

CALL STACK (IMAGEN 5)

    - Se utiliza para saber como se va a comportar nuestro codigo ya en el navegador
    - Las tareas se empiezan a apilar de abajo hacia arriba con forme se van llamando
    - Conorme se van terminando las tareas las va quitando del call stack
    - Como primer tarea pone siempre el objeto global

    SINGLE THREAD (Synchronous)

    - Javascript solo puede hacer una tarea a la vez por eso apila la tareas!!

GARBAGE COLLECTION (shG8h.gif)

    - Liberar espacio de variables y/o funciones que ya no se utilizan o cambian de valor (el valor anterior se elimina)
    - Una vez que hay cosas que ya no se estan utilizando en el stack se hace un MARK y despues un SWEEP, para liberar ese espacio

STACK OVERFLOW (IMAGEN 6)

    - Cuando tenemos un ciclo, funcion o algo que hace que desbordemos nuestro Call Stack
    - Chrome hizo modificaciones para que en caso de que haya un cierto numero de peticiones de algo que nos puede
      llevar a un stack overflow deja de ejecutar ese codigo
      - Cuando pasa esto Chrome manda un error de "Hubo un máximo de llamadas, te excediste no vamos a continuar con esto"
      NOTA: esto hacia que el navegador se cerrara



===== TIPS & RECORDAR =====

    - UNDEFINED - Es un key word de javascript

    - http://www.evolutionoftheweb.com/         EVOLUCION DE LA WEB, Historia de los navegadores
    - https://www.campusmvp.es/recursos/post/fundamentos-de-javascript-por-que-deberias-saber-como-funciona-el-motor.aspx   COMO FUNCIONAN LOS MOTORES MODERNOS
    - https://astexplorer.net/ ARBOL SINTAXICO (Generar el arbol con el codigo javascript)

    - FUNDAMENTOS DE INGENIERIA DE SOFTWARE! Curso recomendado en la clase 3
    - CURSO DE ECMASCRIPT 6! Curso recomendado en la clase 6, donde se revisa que son las constantes y los lets


===== RESUMEN CLASES =====

1   -   Presentación del curso, no hay temas
2   -   Historia de Javascript, CREADOR, AÑO DE CREACIÓN, ECMA, ECMASCRIPT (IMAGEN1, IMAGEN2)
3   -   JAVASCRIPT ENGINE (que es, como funciona)
4   -   V8 (ques es y como nace)
5   -   ¿Que pasa dentro del motor de Javascript V8?
6   -   OBJETO GLOBAL WINDOW, VARIABLE THIS Y HOISTING
7   -   MEMORY HEAP
8   -   CALL STACK Y SINGLE THREAD (IMAGEN 5)
9   -   GARBAGE COLLECTION (shG8h.gif)
10  -   STACK OVERFLOW (IMAGEN 6)